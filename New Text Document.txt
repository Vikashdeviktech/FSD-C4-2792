public class BinarySearchTree{
    
    class Node{
        int key;
        Node left,right;
        
        public Node(int item){
            key=item;
            left=right=null;
        }
    }
    // root of BST
    Node root;
    //constructor
    BinarySearchTree(){
        root=null;
    }
    // this is used to call a recursion function 
    
    void insert(int key){
        
        root=insertRec(root,key);
    }
    
    // recusrion function to insert the value in the BST
    
    Node insertRec(Node root,int key){
        
        if(root==null){
            root=new Node(key);
            return root;
        }
        
        if(key<root.key)
          root.left=insertRec(root.left,key);
        else if(key>root.key)
          root.right=insertRec(root.right,key);
        return root;
        
    }
    
    void inorder(){
        inorderRec(root);
    }
    // printing the element in the tree
    
void inorderRec(Node root){
    if(root!=null){
        inorderRec(root.left);
        System.out.println(root.key);
        inorderRec(root.right);
    }
}

void preorder(){
        preorderRec(root);
    }
    // printing the element in the tree
    
void preorderRec(Node root){
    if(root!=null){
        System.out.println(root.key);
        preorderRec(root.left);
        inorderRec(root.right);
    }
}

void postorder(){
        preorderRec(root);
    }
    // printing the element in the tree
    
void postorderRec(Node root){
    if(root!=null){
        
        postorderRec(root.left);
        postorderRec(root.right);
        System.out.println(root.key);
    }
}

public static void main(String[] args ){
    BinarySearchTree tree=new BinarySearchTree();
    tree.insert(50);
    tree.insert(60);
    tree.insert(30);
    tree.insert(20);
    tree.insert(10);
    tree.preorder();
}
    
    
}